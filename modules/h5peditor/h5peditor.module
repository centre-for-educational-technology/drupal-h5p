<?php
/**
 * @file
 * Contains h5peditor.module
 */

use \Drupal\h5p\H5PDrupal\H5PDrupal;
use \Drupal\h5peditor\H5PEditor;
use \Drupal\Core\Url;

function h5p_get_editor_settings() {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

  $content_validator = H5PDrupal::getInstance('contentvalidator');
  $file_path = base_path() . H5PDrupal::getRelativeH5PPath() . '/editor';
  $content_id = 0;

  $ajax_path = Url::fromUri(
    'internal:/h5peditor/' . \H5PCore::createToken('editorajax') . "/{$content_id}/"
  )->toString();

  // Add translation
  $language_file = base_path() . 'vendor/h5p/h5p-editor/language/' . $language . '.js';
  if (! file_exists($language_file)) {
    $language_file = base_path() . 'vendor/h5p/h5p-editor/language/en.js';
  }

  $css_js_query_string = \Drupal::state()->get('css_js_query_string') ?: '';
  $cache_buster = ! empty($css_js_query_string) ? '?' . $css_js_query_string : '';

  $module_path = drupal_get_path('module', 'h5p');
  $assets = array(
    'css' => array(),
    'js' => array()
  );

  foreach (\H5PCore::$styles as $style) {
    $css = 'vendor/h5p/h5p-core/' . $style;
    $assets['css'][] = base_path() . $css . $cache_buster;
  }

  foreach (\H5PCore::$scripts as $script) {
    $js = 'vendor/h5p/h5p-core/' . $script;
    $assets['js'][] = base_path() . $js . $cache_buster;
  }

  foreach (\H5peditor::$styles as $style) {
    $assets['css'][] = base_path() . 'vendor/h5p/h5p-editor/' . $style . $cache_buster;
  }
  // Add our own scripts
  foreach (\H5peditor::$scripts as $script) {
    // We do not want the creator of the iframe inside the iframe
    if ($script !== 'scripts/h5peditor-editor.js') {
      $assets['js'][] = base_path() . 'vendor/h5p/h5p-editor/' . $script . $cache_buster;
    }
  }
  $assets['js'][] = $language_file . $cache_buster;

//  $h5p_default_path = $this->getOption('default_path', 'h5p');
//  $library_path = \Drupal::service('file_system')->realpath('public://' . $h5p_default_path . '/libraries/');

  $settings = array(
    'h5peditor' => array(
      'filesPath' => $file_path,
      'fileIcon' => array(
        'path' => base_path() . 'vendor/h5p/h5p-editor/images/binary-file.png',
        'width' => 50,
        'height' => 50,
      ),
      'ajaxPath' => $ajax_path,
      // TODO: Test this properly with other composer configurations, find more robust solution
      'modulePath' => 'vendor/h5p',
      'libraryPath' => $module_path . '/libraries/',
      'copyrightSemantics' => $content_validator->getCopyrightSemantics(),
      'assets' => $assets,
      'contentRelUrl' => '../h5p/content/',
      'editorRelUrl' => '../../../vendor/h5p/h5p-editor',
      'apiVersion' => \H5PCore::$coreApi,
    ),
  );

  if (isset($_SESSION['h5p']['node']['json_content'])) {
    $settings['h5peditor']['nodeVersionId'] = $content_id;
  }

  return $settings;
}

/**
 * Keeps track of our editor instance, saving valuable resources.
 * TODO: Not a hook, could be moved to some helper class?
 *
 * @staticvar H5peditor $instance
 * @return \H5peditor
 */
function h5peditor_get_instance() {
  static $instance;

  if (!$instance) {

    $core = H5PDrupal::getInstance('core');
    $instance = new \H5peditor(
      $core,
      new H5PEditor\H5PEditorDrupalStorage(),
      new H5PEditor\H5PEditorDrupalAjax()
    );
  }

  return $instance;
}

/**
 * TODO: Rather use core functions than this?
 */
function h5peditor_get_library_property($library, $property = 'all') {
  $matches = array();
  preg_match_all('/(.+)\s(\d+)\.(\d+)$/', $library, $matches);
  if (count($matches) == 4) {
    $library_data = array(
      'machineName' => $matches[1][0],
      'majorVersion' => $matches[2][0],
      'minorVersion' => $matches[3][0],
    );
    switch ($property) {
      case 'all':
        return $library_data;
      case 'libraryId':
        $temp = db_query(
          "SELECT library_id
          FROM {h5p_libraries}
          WHERE machine_name = :name
          AND major_version = :major_version
          AND minor_version = :minor_version",
          array(':name' => $library_data['machineName'], ':major_version' => $library_data['majorVersion'], ':minor_version' => $library_data['minorVersion']))->fetchField();
        return $temp;
      default:
        return $library_data[$property];
    }
  } else {
    return FALSE;
  }
}
