<?php
/**
 * @file
 * Contains h5p.module
 */

use Drupal\h5p\H5PDrupal;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_library_info_build().
 */
function h5p_library_info_build() {
  $libraries = [];

  // TODO: Add license to libraries? version?

  // Register jQuery version that H5P depends on
  $libraries['h5p.jquery'] = [
    'js' => [
      '/vendor/h5p/h5p-core/js/jquery.js' => [],
    ],
  ];

  // Register script for converting drupalSetting to H5PIntegration
  $libraries['h5p.integration'] = [
    'js' => [
      'js/h5p-integration.js' => [],
    ],
  ];

  // Add dependencies for content scripts
  $libraries['h5p.content']['dependencies'] = [
    'h5p/h5p.integration',
    'h5p/h5p.jquery',
  ];

  // Register core JS needed when viewing H5P content
  foreach (\H5PCore::$scripts as $script) {
    if ($script === 'js/jquery.js') {
      continue;
    }
    $js = "vendor/h5p/h5p-core/$script";
    $libraries['h5p.content']['js']["/$js"] = [];
  }

  // Register core CSS needed when viewing H5P content
  foreach (H5PCore::$styles as $style) {
    $css = "vendor/h5p/h5p-core/$style";
    $libraries['h5p.content']['css']['base']["/$css"] = [];
  }

  // Register H5P content dependent on jQuery
  $libraries['h5p.admin'] = [
    'css' => [
      'base' => [
        '/vendor/h5p/h5p-core/styles/h5p.css' => [],
        '/vendor/h5p/h5p-core/styles/h5p-admin.css' => [],
      ]
    ],
    'js' => [
      'js/h5p-admin-integration.js' => [],
      '/vendor/h5p/h5p-core/js/h5p-utils.js' => [],
    ],
    'dependencies' => [
      'h5p/h5p.integration',
      'h5p/h5p.jquery',
    ],
  ];
  // Register core JS needed when administrating H5P libraries
  /*foreach (\H5PCore::$adminScripts as $script) {
    if ($script === 'js/jquery.js') {
      continue;
    }
    $js = "vendor/h5p/h5p-core/$script";
    $libraries['h5p.admin']['js']["/$js"] = [];
    // TODO $assets['js'][] = base_path() . $js . $cache_buster;
  }*/

  $libraries['h5p.admin.library.list'] = [
    'js' => [
      '/vendor/h5p/h5p-core/js/h5p-library-list.js' => [],
    ],
    'dependencies' => [
      'h5p/h5p.admin',
    ],
  ];

  $libraries['h5p.admin.library.details'] = [
    'js' => [
      '/vendor/h5p/h5p-core/js/h5p-library-details.js' => [],
    ],
    'dependencies' => [
      'h5p/h5p.admin',
    ],
  ];

  // Load installed libraries
  $h5p_libraries = db_query("SELECT library_id AS id,
                                machine_name AS name,
                                major_version AS major,
                                minor_version AS minor,
                                preloaded_js AS js_csv,
                                preloaded_css AS css_csv,
                                drop_library_css
                           FROM {h5p_libraries}");

  $h5p_path = \Drupal::state()->get('h5p_default_path') ?: 'h5p'; // TODO: Use \Drupal::config()->get() ?
  $libraries_prefix = '/' . \Drupal\Core\StreamWrapper\PublicStream::basePath() . "/{$h5p_path}/libraries";
  foreach ($h5p_libraries as $h5p_library) {

    $js = [];
    $scripts = explode(',', $h5p_library->js_csv);
    foreach ($scripts as &$script) {
      $script = trim($script);
      if ($script) {
        $js["$libraries_prefix/{$h5p_library->name}-{$h5p_library->major}.{$h5p_library->minor}/$script"] = [];
      }
    }

    $css = [];
    $styles = explode(',', $h5p_library->css_csv);
    foreach ($styles as &$style) {
      $style = trim($style);
      if ($style) {
        $css["$libraries_prefix/{$h5p_library->name}-{$h5p_library->major}.{$h5p_library->minor}/$style"] = [];
      }
    }

    // Load dependencies
    $h5p_dependencies = db_query(
        "SELECT hl.machine_name AS name,
                hl.major_version AS major,
                hl.minor_version AS minor
           FROM {h5p_libraries_libraries} hll
           JOIN {h5p_libraries} hl ON hll.required_library_id = hl.library_id
          WHERE hll.library_id = :library_id
            AND dependency_type = 'preloaded'",
      array(':library_id' => $h5p_library->id));

    $dependencies = [];
    foreach ($h5p_dependencies as $h5p_dependency) {
      $dependencies[] = 'h5p/' . _h5p_library_machine_to_id($h5p_dependency);
    }

    $libraries[_h5p_library_machine_to_id($h5p_library)] = [
      'js' => $js,
      'css' => [
        'base' => $css,
      ],
      'dependencies' => $dependencies,
    ];
  }

  return $libraries;
}

/**
 * TODO: Helper?
 */
function _h5p_library_machine_to_id($h5p_library) {
  if (is_array($h5p_library)) {
    $h5p_library = (object) [
      'name' => $h5p_library['machineName'],
      'major' => $h5p_library['majorVersion'],
      'minor' => $h5p_library['minorVersion'],
    ];
  }

  $name = strtolower($h5p_library->name);
  if (substr($name, 0, 4) !== 'h5p.') {
    $name = "h5p.{$name}";
  }
  $name = "{$name}-{$h5p_library->major}.{$h5p_library->minor}";
  return $name;
}

/**
 * Implements hook_cron().
 */
function h5p_cron() {
  h5p_fetch_libraries_metadata();
  remove_old_log_events();
}

/**
 * Remove any log messages older than the set limit.
 * TODO: Not a hook, could be moved to some helper class?
 */
function remove_old_log_events() {
  $older_than = (time() - \H5PEventBase::$log_time);

  db_delete('h5p_events')
    ->condition('created_at', $older_than, '<')
    ->execute();
}

/**
 * TODO: Not a hook, could be moved to some helper class?
 */
function h5p_fetch_libraries_metadata($fetchingDisabled = FALSE) {

  // If fetching of libraries from h5p.org is enabled and
  // It has not been run the last 24 hours, let's do it
  $h5p_hub_is_enabled = \Drupal::state()->get('h5p_hub_is_enabled') ?: FALSE;
  $h5p_send_usage_statistics = \Drupal::state()->get('h5p_send_usage_statistics') ?: TRUE;
  $h5p_fetched_library_metadata_on = \Drupal::state()->get('h5p_fetched_library_metadata_on') ?: 0;

  if ($fetchingDisabled || (($h5p_hub_is_enabled) || $h5p_send_usage_statistics) &&
      (intval($h5p_fetched_library_metadata_on) < (time() - 86400))) {
    // Fetch the library-metadata:
    $core = H5PDrupal::getInstance('core');
    $core->fetchLibrariesMetadata($fetchingDisabled);
    h5p_variable_set('h5p_fetched_library_metadata_on', time());
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function h5p_user_delete(Drupal\Core\Entity\EntityInterface $entity) {
  db_delete('h5p_points')
    ->condition('uid', $entity->id())
    ->execute();

  // Remove content user data
  db_delete('h5p_content_user_data')
    ->condition('user_id', $entity->id())
    ->execute();
}

/**
 * Checks if the variable has changed before setting it.
 * This is to avoid performance costly mistakes.
 * TODO: Not a hook, could be moved to some helper class?
 */
function h5p_variable_set($name, $value) {
  $state_value = \Drupal::state()->get($name);
  if ($state_value !== $value) {
    \Drupal::state()->set($name, $value);
  }
}
