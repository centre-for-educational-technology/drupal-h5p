<?php
/**
 * @file
 * h5p library drupal integration.
 *
 * @author
 * JÃ¶rg Matheisen, drupalme.de
 */

use Drupal\h5p\Helper;
use Drupal\h5p\H5PDrupal;

use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;

use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;

// load h5p core classes
require_once (\Drupal::root() . '/modules/contrib/h5p/vendor/h5p/h5p-core/h5p.classes.php');
require_once (\Drupal::root() . '/modules/contrib/h5p/vendor/h5p/h5p-core/h5p-development.class.php');
require_once (\Drupal::root() . '/modules/contrib/h5p/vendor/h5p/h5p-core/h5p-event-base.class.php');
require_once (\Drupal::root() . '/modules/contrib/h5p/vendor/h5p/h5p-core/h5p-file-storage.interface.php');
require_once (\Drupal::root() . '/modules/contrib/h5p/vendor/h5p/h5p-core/h5p-default-storage.class.php');


/**
 * implements hook_page_attachments
 */
function h5p_page_attachments(array &$attachments) {

  if (h5p_node_add_or_edit()) {
    $attachments['#attached']['library'][] = 'h5p/h5pintegration_setting';
    $attachments['#attached']['library'][] = 'h5p/h5p_core';
    $attachments['#attached']['library'][] = 'h5p/h5p_libraries';

  } elseif (h5p_admin()) {
    $attachments['#attached']['library'][] = 'h5p/h5padminintegration_setting';
    $attachments['#attached']['library'][] = 'h5p/h5p_admin';
  }


  /*
  $attachments['#attached']['html_head'][] = [
    // The data.
    [
      '#type' => 'html_tag',
      // The HTML tag to add, in this case a  tag.
      '#tag' => 'script',

      // The value of the HTML tag, here we want to end up with
      // alert("Hello world!");.
      '#value' => 'alert("Hello world!");',
      // Set attributes like src to load a file.
      '#attributes' => [
         'type' => "text/javascript",
         //'src' => '',
      ]
    ],
    // A key, to make it possible to recognize this HTML  element when altering.
    'script 1',
  ];
  */

}


/**
 * implements hook_preprocess_node
 */
function h5p_preprocess_node(&$vars) {

  $node = $vars['node'];
  if ($node->bundle() == 'h5p_content') {
    $vars['#attached']['library'][] = 'h5p/h5pintegration_setting';
    $vars['#attached']['library'][] = 'h5p/h5p_core';
    $vars['#attached']['library'][] = 'h5p/h5p_libraries';
    $vars['#cache']['max-age'] = 0;
  }
}


/**
 * implements hook_library_info_build
 */
function h5p_library_info_build() {

  $libraries = [];

  if (! empty($_SESSION['h5p']['h5p_core'])) {
    // h5p integration embed type iframe

    $libraries['h5pintegration_setting']['js']['js/h5p-integration.js'] = [];

    // Add a library whose information changes depending on certain conditions.
    $libraries['h5p_core'] = [
      'dependencies' => [
        'core/drupal',
        'core/drupalSettings'
      ],
    ];

    foreach ($_SESSION['h5p']['h5p_core']['js'] as $script) {
      $libraries['h5p_core']['js'][$script] = [];
    }
    foreach ($_SESSION['h5p']['h5p_core']['css'] as $style) {
      $libraries['h5p_core']['css']['theme'][$style] = [];
    }
    unset($_SESSION['h5p']['h5p_core']);

  }

  if (! empty($_SESSION['h5p']['h5p_libraries'])) {
    // h5p intergration embed type div

    // Add a library whose information changes depending on certain conditions.
    $libraries['h5p_libraries'] = [
      'dependencies' => [
        'core/drupal',
        'core/drupalSettings'
      ],
    ];
    foreach ($_SESSION['h5p']['h5p_libraries']['js'] as $script) {
      $libraries['h5p_libraries']['js'][$script] = [];
    }
    foreach ($_SESSION['h5p']['h5p_libraries']['css'] as $style) {
      $libraries['h5p_libraries']['css']['theme'][$style] = [];
    }
    unset($_SESSION['h5p']['h5p_libraries']);
  }

  if (! empty($_SESSION['h5p']['h5p_admin'])) {

    $libraries['h5padminintegration_setting']['js']['js/h5p-admin-integration.js'] = [];

    // Add a library whose information changes depending on certain conditions.
    $libraries['h5p_admin'] = [
      'dependencies' => [
        'core/drupal',
        'core/drupalSettings'
      ],
    ];
    foreach ($_SESSION['h5p']['h5p_admin']['js'] as $script) {
      $libraries['h5p_admin']['js'][$script] = [];
    }
    foreach ($_SESSION['h5p']['h5p_admin']['css'] as $style) {
      $libraries['h5p_admin']['css']['theme'][$style] = [];
    }
    unset($_SESSION['h5p']['h5p_admin']);
  }

  return $libraries;
}


/**
 * Implements hook_cron().
 */
function h5p_cron() {
  h5p_fetch_libraries_metadata();
  remove_old_log_events();
}

/**
 * Remove any log messages older than the set limit.
 */
function remove_old_log_events() {
  $older_than = (time() - \H5PEventBase::$log_time);

  db_delete('h5p_events')
    ->condition('created_at', $older_than, '<')
    ->execute();
}


function h5p_fetch_libraries_metadata($fetchingDisabled = FALSE) {

  // If fetching of libraries from h5p.org is enabled and
  // It has not been run the last 24 hours, let's do it
  $h5p_hub_is_enabled = \Drupal::state()->get('h5p_hub_is_enabled') ?: FALSE;
  $h5p_send_usage_statistics = \Drupal::state()->get('h5p_send_usage_statistics') ?: TRUE;
  $h5p_fetched_library_metadata_on = \Drupal::state()->get('h5p_fetched_library_metadata_on') ?: 0;

  if ($fetchingDisabled || (($h5p_hub_is_enabled) || $h5p_send_usage_statistics) &&
      (intval($h5p_fetched_library_metadata_on) < (time() - 86400))) {
    // Fetch the library-metadata:
    $helper = new Helper\H5PEnvironment();
    $core = $helper->getInstance('core');
    $core->fetchLibrariesMetadata($fetchingDisabled);
    h5p_variable_set('h5p_fetched_library_metadata_on', time());
  }
}

/**
 * Get path to HTML5 Package.
 *
 * @param int $content_id
 * @return string
 */
function h5p_get_export_path($content) {
  $h5p_export = \Drupal::state()->get('h5p_export') ?: 1;
  if ($h5p_export) {
    $path = file_create_url(_h5p_get_h5p_path() . '/exports/' . ($content['slug'] ? $content['slug'] . '-' : '') . $content['id'] . '.h5p');
  } else {
    $path = '';
  }
  return $path;
}

/**
 * Get url to HTML5 Package.
 *
 * @param int $content_id
 * @return string
 */
function h5p_get_export_url($content) {
  $h5p_export = \Drupal::state()->get('h5p_export') ?: 1;
  if ($h5p_export) {
    $h5p_default_path = \Drupal::state()->get('h5p_default_path') ?: 'h5p';
    $url = file_create_url('public://' . $h5p_default_path . '/exports/' . ($content['slug'] ? $content['slug'] . '-' : '') . $content['id'] . '.h5p');
  } else {
    $url = '';
  }
  return $url;
}


/**
 * Creates the title for the library details page
 *
 * @param integer $library_id
 */
function _h5p_library_details_title($library_id) {
  return db_query('SELECT title FROM {h5p_libraries} where library_id = :id', array(':id' => $library_id))->fetchField();
}

/**
 * Implements hook_entity_extra_field_info()().
 */
function h5p_entity_extra_field_info() {

  $extra['node']['h5p_content']['form']['json_content'] = [
    'label' => t('H5P json_content'),
    'weight' => 2,

  ];
  $extra['node']['h5p_content']['form']['h5p'] = [
    'label' => t('H5P Upload'),
    'description' => t('Upload interactive content.'),
    'weight' => 2,

  ];
  $extra['node']['h5p_content']['form']['h5p']['display'] = [
    'label' => t('Interactive content'),
    'description' => t('Interactive content'),
    'weight' => 2,

  ];
  $extra['node']['h5p_content']['form']['h5p_options'] = [
    'label' => t('H5P Options'),
    'description' => t('Display options for interactive content.'),
    'weight' => 3,
    'type' => 'textfield',
  ];

  return $extra;
}



/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function h5p_node_prepare_form(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Form\FormStateInterface $form_state) {

  if ($entity->getType() != 'h5p_content') {
    return;
  }

  if ($entity->id()) {

    // h5p Infos laden
    $helper = new Helper\H5PEnvironment();
    $core = $helper->getInstance('core');

    $content = $core->loadContent($entity->id());
    if ($content !== NULL) {
      $_SESSION['h5p']['node']['json_content'] = $content['params'];
      $_SESSION['h5p']['node']['main_library_id'] = $content['library'];
      $_SESSION['h5p']['node']['embed_type'] = $content['embedType'];
      $_SESSION['h5p']['node']['main_library'] = $content['library'];
      $_SESSION['h5p']['node']['filtered'] = $content['filtered'];
      $_SESSION['h5p']['node']['disable'] = $content['disable'];
      $_SESSION['h5p']['node']['h5p_slug'] = $content['slug'];
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter(
 */
function h5p_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  if ($form_id != 'node_h5p_content_form' && $form_id != 'node_h5p_content_edit_form') {
    return;
  }

  $input = $form_state->getUserInput();

  if ($form_id == 'node_h5p_content_form') {
    if (empty($form_state->getUserInput())) {
      unset($_SESSION['h5p']['node']);
    }
  }
  // debug manually unset
  // unset($_SESSION['h5p']['node']);

  $helper = new Helper\H5PEnvironment();
  $core = $helper->getInstance('core');

  _h5p_check_settings();
  _h5p_maintain_session_variables();

  $form['#validate'][] = 'h5p_form_validate';
  $form['#validate'][] = 'h5p_validate';

  /*
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );
  */

  $form['#attributes'] = array('enctype' => "multipart/form-data");

  $form['h5p'] = array(
    '#type' => 'file',
    '#title' => t('HTML 5 Package'),
    '#description' => t('Select a .h5p file to upload and create interactive content from. You may start with the <a href="http://h5p.org/content-types-and-applications" target="_blank">example files</a> on H5P.org'),
    '#weight' => 2,
  );

  if (isset($_SESSION['h5p']['node']['json_content']) && $_SESSION['h5p']['node']['json_content'] != '{}') {
    $node = $form_state->getFormObject()->getEntity();
    $content = h5p_get_content($node);
    $filtered_params = $core->filterParameters($content);
  }
  else {
    $filtered_params = '{}';
  }

  // h5p library user input
  // value from h5peditor/sctipts/applications.js
  $form['json_content'] = array(
    '#type' => 'hidden',
    '#default_value' => $filtered_params,
  );
  $_SESSION['h5p']['node']['json_content'] = $filtered_params;

  $form['main_library_id'] = array(
    '#type' => 'value',
    '#default_value' => isset($_SESSION['h5p']['node']['main_library_id']) ? $_SESSION['h5p']['node']['main_library_id']: '',
  );

  $form['embed_type'] = array(
    '#type' => 'value',
    '#default_value' => isset($_SESSION['h5p']['node']['embed_type']) ? $_SESSION['h5p']['node']['embed_type'] : 'div',
  );

  if (! isset($_SESSION['h5p']['node']['disable'])) {
    $disable['value'] = \H5PCore::DISABLE_NONE;
  } else {
    $disable['value'] = $_SESSION['h5p']['node']['disable'];
  }

  // Keep track of the old disable value
  $form['disable'] = array(
    '#type' => 'value',
    '#value' => $disable['value'],
  );

  // Display options
  $h5p_frame = \Drupal::state()->get('h5p_frame') ?: TRUE;
  if ($h5p_frame) {
    $form['h5p_options'] = array(
      '#type' => 'fieldset',
      '#title' => t('H5P Options'),
      '#collapsible' => true,
      '#collapsed' => true,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('h5p-action-bar-settings')
      ),
    );

    // Add display options
    $display_options = $core->getDisplayOptionsForEdit($disable['value'] !== H5PCore::DISABLE_NONE ? $disable['value'] : NULL);
    $labels = _h5p_get_disable_labels();
    foreach ($display_options as $name => $value) {
      _h5p_add_display_option($form['h5p_options'], $name, $labels[$name], $value, ($name === H5PCore::DISPLAY_OPTION_FRAME ? '.h5p-action-bar-settings .form-item:not(.form-item-frame)' : NULL));
    }

    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        array_unshift($form['actions'][$action]['#submit'], '_h5p_form_submit');
      }
    }
  }

  return $form;
}

/**
 * Helper function for adding display options to form
 *
 * @method _h5p_add_display_option
 * @param  Array      $element               Reference to form element
 * @param  String     $name                  Name of form element
 * @param  String     $title
 * @param  String     $value
 * @param  [type]     $visibility_subject_id A jquery selector. If this is set,
 *                    these DOM elements will be hidden when this this checkbox
 *                    is unchecked
 */
function _h5p_add_display_option (&$element, $name, $title, $value, $visibility_subject_id = null) {
  $element[$name] = array(
    '#type' => 'checkbox',
    '#title' => $title,
    '#default_value' => $value,
  );

  if ($visibility_subject_id !== null) {
    $classes = array('h5p-visibility-toggler');
    $element[$name]['#attributes'] = array(
      'class' => $classes,
      'data-h5p-visibility-subject-selector' => $visibility_subject_id,
    );
  }
}


/**
 * Handle h5p node form submission
 */
function _h5p_form_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state) {

  $helper = new Helper\H5PEnvironment();
  $core = $helper->getInstance('core');

  $values = $form_state->getValues();
  $disable = $core->getStorableDisplayOptions($values, $values['disable']);

  $_SESSION['h5p']['node']['disable'] = $disable;
  $_SESSION['h5p']['node']['json_content'] = $values['json_content'];
  $_SESSION['h5p']['node']['embed_type'] = $values['embed_type'];
  $_SESSION['h5p']['node']['h5p_editor'] = $values['h5p_editor'];
  $_SESSION['h5p']['node']['h5p'] = $values['h5p'];
}


/**
 * Provide human readable labels for display options.
 */
function _h5p_get_disable_labels() {
  return array(
    H5PCore::DISPLAY_OPTION_FRAME => t('Display buttons (download, embed and copyright)'),
    H5PCore::DISPLAY_OPTION_DOWNLOAD => t('Download button'),
    H5PCore::DISPLAY_OPTION_EMBED => t('Embed button'),
    H5PCore::DISPLAY_OPTION_COPYRIGHT => t('Copyright button'),
    H5PCore::DISPLAY_OPTION_ABOUT => t('About H5P button')
  );
}

/**
 * Validate the h5p file
 */
function h5p_form_validate(array &$form, FormStateInterface $form_state) {

  $values = $form_state->getValues();

  // Avoid blocking node deletion with missing files.
  if ($values['op'] == t('Delete')) {
    return;
  }

  $validators = array(
    'file_validate_extensions' => array('h5p'),
  );
  // New uploads need to be saved in temp in order to be viewable
  // during node preview.
  $h5p_default_path = \Drupal::state()->get('h5p_default_path') ?: 'h5p';
  $temporary_file_path = 'public://' . $h5p_default_path . '/temp/' . uniqid('h5p-');
  file_prepare_directory($temporary_file_path, FILE_CREATE_DIRECTORY);

  $file = file_save_upload('h5p', $validators, $temporary_file_path);
  if (! empty($file)) {
    // We're good to go.
    $values['new_h5p'] = TRUE;
    $_SESSION['h5p_upload'] = $values['h5p'] = \Drupal::service('file_system')->realpath($file[0]->getFileUri());
    $_SESSION['h5p_upload_folder'] = \Drupal::service('file_system')->realpath($temporary_file_path);
  }
  elseif (empty($SESSION['h5p']['node']['main_library_id']) && empty($values['h5p']) && empty($_SESSION['h5p_upload'])) {
    $form_state->setErrorByName('h5p', t('You must upload a h5p file.'));
  }
}


function h5p_validate(array &$form, FormStateInterface $form_state) {
  if (isset($_SESSION['h5p_upload'])) {
    $helper = new Helper\H5PEnvironment();
    $h5p_validator = $helper->getInstance('validator');

    $valid = $h5p_validator->isValidPackage();
    if (!$valid) {
      $form_state->setErrorByName('h5p', t('The uploaded file was not a valid H5P package'));
      // Nothing is valid, nothing is kept.
      unset($_SESSION['h5p_upload'], $_SESSION['h5p_upload_folder']);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function h5p_node_insert(Drupal\Core\Entity\EntityInterface $entity) {

  if ($entity->bundle() != 'h5p_content') {
    return;
  };

  if (isset($_SESSION['h5p_upload'])) {

    $helper = new Helper\H5PEnvironment();
    $h5p_core = $helper->getInstance('storage');

    $h5p_core->savePackage($entity->id(), $entity->id() , FALSE, array(
      'disable' => $_SESSION['h5p']['node']['disable'],
      'title' => $entity->getTitle(),
    ));
  } else {
    $main_library = isset($_SESSION['h5p']['node']['main_library']) ? $_SESSION['h5p']['node']['main_library'] : NULL;
    if (!isset($main_library['name'])) {
      $lib = db_query(
        "SELECT machine_name,
                  major_version,
                  minor_version
             FROM {h5p_libraries}
            WHERE library_id = :id",
        array(
          ':id' => $_SESSION['h5p']['node']['main_library_id']
        ))->fetchObject();
      $lib = array(
        'libraryId' => $_SESSION['h5p']['node']['main_library_id'],
        'machineName' => $lib->machine_name,
        'majorVersion' => $lib->major_version,
        'minorVersion' => $lib->minor_version
      );
    } else {
      $lib = array(
        'libraryId' => $_SESSION['h5p']['node']['main_library_id'],
        'machineName' => (isset($_SESSION['h5p']['node']['main_library']['name']) ? $_SESSION['h5p']['node']['main_library']['name'] : ''),
        'majorVersion' => (isset($_SESSION['h5p']['node']['main_library']['majorVersion']) ? $_SESSION['h5p']['node']['main_library']['majorVersion'] : ''),
        'minorVersion' => (isset($_SESSION['h5p']['node']['main_library']['minorVersion']) ? $_SESSION['h5p']['node']['main_library']['minorVersion'] : '')
      );
    }

    $helper = new Helper\H5PEnvironment();
    $core = $helper->getInstance('core');
    $core->saveContent(array(
      'id' => $entity->id(),
      'title' => $entity->getTitle(),
      'params' => $_SESSION['h5p']['node']['json_content'],
      'embed_type' => $_SESSION['h5p']['node']['embed_type'],
      'disable' => $_SESSION['h5p']['node']['disable'],
      'library' => $lib,
      'h5p_library' => isset($_SESSION['h5p']['node']['h5p_library']) ? $_SESSION['h5p']['node']['h5p_library'] : NULL
    ), $entity->id());
  }

}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function h5p_node_update(Drupal\Core\Entity\EntityInterface $entity) {

  $h5p_revisioning = \Drupal::state()->get('h5p_revisioning') ?: 1;
  if ($entity->getRevisionId() && $h5p_revisioning) {
    // Create new revision
    $helper = new Helper\H5PEnvironment();
    $h5p_storage = $helper->getInstance('storage');

    if (isset($_SESSION['h5p_upload'])) {
      // Use newly uploaded package
      $h5p_storage->savePackage($entity->getRevisionId(), $entity->id(), FALSE, array('disable' => $_SESSION['h5p']['node']['disable']));
    } else {
      // Copy old package
      // todo $JM $entity->getOriginalId()
      // $h5p_storage->copyPackage($entity->getRevisionId(), $entity->getOriginalId(), $entity->id());
      // Insert content:
      h5p_node_insert($entity);
    }
  } else {
    if (isset($_SESSION['h5p_upload'])) {
      // Replace old package
      $helper = new Helper\H5PEnvironment();
      $h5p_storage = $helper->getInstance('storage');

      $h5p_storage->savePackage(array(
        'id' => h5p_get_content_id($entity),
        'title' => $entity->label(),
        'disable' => $_SESSION['h5p']['node']['disable'],
      ), $entity->id(), FALSE);
    } else {
      h5p_node_insert($entity);
    }
  }
}


/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function h5p_node_delete(Drupal\Core\Entity\EntityInterface $entity) {

  $res = db_query("SELECT content_id AS id, slug FROM {h5p_nodes} WHERE nid = :nid", array(':nid' => $entity->id()));
  while ($content = $res->fetchAssoc()) {
    h5p_delete_h5p_content($content);
  }

  if (isset($_SESSION['h5p']['node']['main_library'])) {
    // Log content delete
    new H5PDrupal\H5PEvent('content', 'delete',
      $entity->id(),
      $entity->label(),
      $_SESSION['h5p']['node']['main_library']['name'],
      $_SESSION['h5p']['node']['main_library']['majorVersion'] . '.' . $_SESSION['h5p']['node']['main_library']['minorVersion']
    );
  }
}

/**
 * Implements hook_ENTITY_TYPE_revision_delete().
 */
function h5p_node_revision_delete(Drupal\Core\Entity\EntityInterface $entity) {

  $h5p_revisioning = Drupal::state('h5p_revisioning')->get() ?: 1;

  if ($h5p_revisioning) {
    h5p_delete_h5p_content(array(
      'id' => $entity->id(),
      'slug' => $_SESSION['h5p']['node']['h5p_slug'],
    ));
  }
}

/**
 * Delete all data related to H5P content.
 * @param array $content
 */
function h5p_delete_h5p_content($content) {

  $helper = new Helper\H5PEnvironment();
  $h5p_core = $helper->getInstance('storage');

  $h5p_core->deletePackage($content);

  // Remove content points
  db_delete('h5p_points')
    ->condition('content_id', $content['id'])
    ->execute();

  // Remove content user data
  db_delete('h5p_content_user_data')
    ->condition('content_main_id', $content['id'])
    ->execute();
}


/**
 * Implements hook_ENTITY_TYPE_load().
 */
function h5p_node_load(array $entities) {

  foreach ($entities as $entity) {
    $node_type = $entity->bundle();
    if ($node_type != 'h5p_content') {
      return;
    }
  }

  if (h5p_node_add_or_edit()) {
    return;
  }

  $helper = new Helper\H5PEnvironment();
  $h5p = $helper->getInstance('core');

  foreach ($entities as $entity) {

    $content = $h5p->loadContent($entity->id());

    if ($content !== NULL) {
      unset($_SESSION['h5p']['node']);

      $_SESSION['h5p']['node']['json_content'] = $content['params'];
      $_SESSION['h5p']['node']['main_library_id'] = $content['library']['id'];
      $_SESSION['h5p']['node']['embed_type'] = $content['embedType'];
      $_SESSION['h5p']['node']['main_library'] = $content['library'];
      $_SESSION['h5p']['node']['filtered'] = $content['filtered'];
      $_SESSION['h5p']['node']['disable'] = $content['disable'];
      $_SESSION['h5p']['node']['h5p_slug'] = $content['slug'];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function h5p_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {

  if ($entity->bundle() != 'h5p_content') {
    return;
  }

  if (! isset($entity->in_preview) && isset($_SESSION['h5p']['node']['main_library_id'])) {
    $html = _include_h5p($entity);
  }

  if (!isset($html)) {
    $html = '<div>' . t('Sorry, preview of H5P content is not yet available.') . '</div>';
  } else {
    h5p_set_started($entity->id());
  }

  $build['content']['h5p'] = array(
    '#type' => 'inline_template',
    '#template' => $html,
    '#weight' => 1,
  );

  // retrieve static var $integration
  $integration = h5p_add_files_and_settings(NULL, NULL);
  $build['#attached']['drupalSettings']['h5p']['drupal_h5p_integration'] = [
    'H5PIntegration' =>  $integration,
  ];
}

/**
 * Implements hook_ENTITY_TYPE_delete
 */
function h5p_user_delete(Drupal\Core\Entity\EntityInterface $entity) {
  db_delete('h5p_points')
    ->condition('uid', $entity->id())
    ->execute();

  // Remove content user data
  db_delete('h5p_content_user_data')
    ->condition('user_id', $entity->id())
    ->execute();
}

/**
 * Implements hook_filter_info().
 *
 * todo $JM D8 equivalent ??
 */
function h5p_filter_info() {
  $filters['h5p_content'] = array(
    'title' => t('H5P Content'),
    'description' => t("Provides shortcodes for adding H5P content to this text format. Should be applied last so that other filters doesn't strip away tags added by this filter."),
    'process callback' => '_h5p_process_shortcodes',
    'tips callback' => '_h5p_filter_tips',
    'cache' => FALSE, // Needs to add its scripts every time. Will make the entire text format not cacheable
  );

  return $filters;
}


/**
 * Provides filter tips callback.
 */
function _h5p_filter_tips($filter, $format, $long = FALSE) {
  return t('Add a [h5p=&lt;h5p id&gt;] tag to include h5p content, for instance [h5p=12] to include the H5P with node id 12.');
}

/**
 * Replace H5P tags with h5p embed codes and add H5P files
 */
function _h5p_process_shortcodes($text, $filter) {
  return preg_replace_callback('%\[h5p=([0-9]*)]%', function($matches) {
    $node = node_load($matches[1]);
    if (!$node || $node->type !== 'h5p_content') {
      return '';
    }
    $html = _include_h5p($node);
    h5p_set_started($node->id());
    return $html;
  }, $text);
}

/**
 * Adds H5P embed code and necessary files
 *
 * @param object $node - H5P node
 * @return string - HTML code for embedding the H5P
 */
function _include_h5p($node) {
  $content_id = $node->id();
  $embed = H5PCore::determineEmbedType($_SESSION['h5p']['node']['embed_type'], $_SESSION['h5p']['node']['main_library']['embedTypes']);

  h5p_add_files_and_settings($node, $embed);
  if ($embed === 'div') {
    $html = '<div class="h5p-content" data-content-id="' .  $content_id . '"></div>';
  } else {
    $html = '<div class="h5p-iframe-wrapper"><iframe id="h5p-iframe-' . $content_id . '" class="h5p-iframe" data-content-id="' . $content_id . '" style="height:1px" src="about:blank" frameBorder="0" scrolling="no"></iframe></div>';
  }
  return $html;
}

/**
 * Set that the logged in user has started on an h5p
 *
 * @param int $content_id
 *  The id for the H5P content (vid or nid depending on setting)
 */
function h5p_set_started($content_id) {

  $user = \Drupal::currentUser();

  if ($user->id()) {
    db_merge('h5p_points')
      ->key(array(
        'content_id' => $content_id,
        'uid' => $user->id(),
      ))
      ->insertFields(array(
        'content_id' => $content_id,
        'uid' => $user->id(),
        'started' => time(),
      ))
      ->execute();
  }
}

/**
 * Adds content independent scripts, styles and settings
 *
 * @returns array Assets.
 */
function h5p_add_core_assets() {
  static $assets;

  if ($assets === NULL) {

    unset($_SESSION['h5p']['h5p_core']);

    $css_js_query_string = \Drupal::state()->get('css_js_query_string') ?: '';
    $cache_buster = '?' . $css_js_query_string;

    $module_path = drupal_get_path('module', 'h5p');
    $assets = array(
      'css' => array(),
      'js' => array()
    );

    foreach (\H5PCore::$styles as $style) {
      $css = 'vendor/h5p/h5p-core/' . $style;
      $_SESSION['h5p']['h5p_core']['css'][] = $style;
      $assets['css'][] = base_path() . $module_path . '/' . $css . $cache_buster;
    }

    foreach (\H5PCore::$scripts as $script) {
      $js = 'vendor/h5p/h5p-core/' . $script;
      $_SESSION['h5p']['h5p_core']['js'][] = $js;
      $assets['js'][] = base_path() . $module_path . '/' . $js . $cache_buster;
    }
  }

  return $assets;
}

function h5p_get_core_settings() {

  global $base_url;

  $user = \Drupal::currentUser();

  $h5p_save_content_state = \Drupal::state()->get('h5p_save_content_state') ?: 0;
  $h5p_save_content_frequency = \Drupal::state()->get('h5p_save_content_frequency') ?: 30;
  $h5p_hub_is_enabled = \Drupal::state()->get('h5p_hub_is_enabled') ?: FALSE;

  $set_finished_url = Url::fromUri('internal:/h5p-ajax/set-finished.json', ['query' => ['token' => \H5PCore::createToken('result')]])->toString();
  $content_user_data_url = Url::fromUri('internal:/h5p-ajax/content-user-data/:contentId/:dataType/:subContentId', ['query' => ['token' => \H5PCore::createToken('contentuserdata')]])->toString();
  $settings = array(
    'baseUrl' => $base_url,
    'url' => _h5p_get_h5p_url(),
    'postUserStatistics' =>  $user->id() > 0,
    'ajax' => array(
      'setFinished' => $set_finished_url,
      'contentUserData' => str_replace('%3A', ':', $content_user_data_url),
    ),
    'saveFreq' => $h5p_save_content_state ? $h5p_save_content_frequency : FALSE,
    'tokens' => ['result' => TRUE],
    'l10n' => array(
      'H5P' => array( // Could core provide this?
        'fullscreen' => t('Fullscreen'),
        'disableFullscreen' => t('Disable fullscreen'),
        'download' => t('Download'),
        'copyrights' => t('Rights of use'),
        'embed' => t('Embed'),
        'size' => t('Size'),
        'showAdvanced' => t('Show advanced'),
        'hideAdvanced' => t('Hide advanced'),
        'advancedHelp' => t('Include this script on your website if you want dynamic sizing of the embedded content:'),
        'copyrightInformation' => t('Rights of use'),
        'close' => t('Close'),
        'title' => t('Title'),
        'author' => t('Author'),
        'year' => t('Year'),
        'source' => t('Source'),
        'license' => t('License'),
        'thumbnail' => t('Thumbnail'),
        'noCopyrights' => t('No copyright information available for this content.'),
        'downloadDescription' => t('Download this content as a H5P file.'),
        'copyrightsDescription' => t('View copyright information for this content.'),
        'embedDescription' => t('View the embed code for this content.'),
        'h5pDescription' => t('Visit H5P.org to check out more cool content.'),
        'contentChanged' => t('This content has changed since you last used it.'),
        'startingOver' => t("You'll be starting over."),
        'by' => t('by'),
        'showMore' => t('Show more'),
        'showLess' => t('Show less'),
        'subLevel' => t('Sublevel'),
        'confirmDialogHeader' => t('Confirm action'),
        'confirmDialogBody' => t('Please confirm that you wish to proceed. This action is not reversible.'),
        'cancelLabel' => t('Cancel'),
        'confirmLabel' => t('Confirm')
      ),
    ),
    'hubIsEnabled' => $h5p_hub_is_enabled,
  );

  if ($user->id()) {
    $settings['user'] = [
      'name' => $user->getAccountName(),
      'mail' => $user->getEmail(),
    ];
  } else {
    $settings['siteUrl'] = Url::fromUri('internal:/', ['absolute' => TRUE])->toString();
  }


  return $settings;

}

function h5p_get_content($node) {

  $helper = new Helper\H5PEnvironment();
  $core = $helper->getInstance('core');

  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $url = Url::fromUri('internal:/node/' . $node->id(), ['absolute' => TRUE])->toString();


  return array(
    'id' => $node->id(),
    'mainId' => $node->id(),
    'title' => $node->label(),
    'params' => $_SESSION['h5p']['node']['json_content'],
    'language' => $language,
    'library' => $_SESSION['h5p']['node']['main_library'],
    'embedType' => 'div',
    'filtered' => $_SESSION['h5p']['node']['filtered'],
    'url' => $url,
    'displayOptions' => $core->getDisplayOptionsForView($_SESSION['h5p']['node']['disable'], $node->id()),
    'slug' => $_SESSION['h5p']['node']['h5p_slug'],
  );
}


function h5p_get_content_settings($content) {
  global $user;

  $helper = new Helper\H5PEnvironment();
  $core = $helper->getInstance('core');

  $filtered = $core->filterParameters($content);

  // todo $JM Drupal 8 module_implements
  /*
   * Allow other modules to alter the filtered parameters,
   * but don't decode the parameters unless it is needed
   */
  /*
  $modules = module_implements('h5p_filtered_params_alter');
  if (!empty($modules)) {
    $filtered = json_decode($filtered);
    foreach ($modules as $module) {
      $function = $module . '_h5p_filtered_params_alter';
      $function($filtered);
    }
    $filtered = json_encode($filtered);
  }
  */

  // Get preloaded user data
  $results = db_query("SELECT sub_content_id, data_id, data
                        FROM {h5p_content_user_data}
                        WHERE user_id = :user_id
                        AND content_main_id = :content_id
                        AND preloaded = 1",
    array(
      ':user_id' => \Drupal::currentUser()->id(),
      ':content_id' => $content['mainId']
    ));

  $content_user_data = array(
    0 => array(
      'state' => '{}'
    )
  );
  foreach ($results as $result) {
    $content_user_data[$result->sub_content_id][$result->data_id] = $result->data;
  }

  $url = Url::fromUri('internal:/h5p/embed/' . $content['mainId'], ['absolute' => TRUE])->toString();
  $export_url = h5p_get_export_url($content);

  return array(
    'library' => \H5PCore::libraryToString($content['library']),
    'jsonContent' => $filtered,
    'fullScreen' => $content['library']['fullscreen'],
    'exportUrl' => $export_url,
    'embedCode' => '<iframe src="' . $url . '" width=":w" height=":h" frameborder="0" allowfullscreen="allowfullscreen"></iframe>',
    'resizeCode' => '<script src="' . h5p_get_resize_url() . '" charset="UTF-8"></script>',
    'mainId' => $content['mainId'],
    'url' => $content['url'],
    'title' => $content['title'],
    'contentUserData' => $content_user_data,
    'displayOptions' => $content['displayOptions'],
  );
}


function h5p_get_resize_url() {
  $url = Url::fromUri('internal:/' . drupal_get_path('module', 'h5p') . '/vendor/h5p/h5p-core/js/h5p-resizer.js',
    ['absolute' => TRUE, 'language' => FALSE])->toString();
  return $url;
}

/**
 * Adds h5p files and settings.
 *
 * @param stdClass $node
 */
function h5p_add_files_and_settings($node, $embed_type) {
  static $integration, $added_js, $added_css;

  if ($node === NULL) {
    return $integration; // For printing
  }

  if (is_null($integration)) {
    // Add integration object
    $integration = h5p_get_core_settings();

    // Add core scripts and styles
    h5p_add_core_assets();
  }

  if (! isset($_SESSION['h5p']['node']['json_content']) || $node === TRUE) {
    return $integration; // Not content.
  }

  $content = h5p_get_content($node);
  if (isset($integration['contents'][$content['id']])) {
    return; // Already added.
  }

  $integration['contents']['cid-' . $content['id']] = h5p_get_content_settings($content);

  $helper = new Helper\H5PEnvironment();
  $core = $helper->getInstance('core');

  $preloaded_dependencies = $core->loadContentDependencies($content['id'], 'preloaded');
  $files = $core->getDependenciesFiles($preloaded_dependencies, _h5p_get_h5p_path());
  $library_list = _h5p_dependencies_to_library_list($preloaded_dependencies);

  \Drupal::moduleHandler()->alter('h5p_scripts', $files['scripts'], $library_list, $embed_type);
  \Drupal::moduleHandler()->alter('h5p_styles', $files['styles'], $library_list, $embed_type);

  unset($_SESSION['h5p']['h5p_libraries']);

  if ($embed_type === 'div') {

    unset($_SESSION['h5p']['h5p_libraries']);
    foreach ($files['scripts'] as $script) {

      $url = base_path() . $script->path . $script->version;
      if (!isset($added_js[$url])) {
        //drupal_add_js($script->path);
        $_SESSION['h5p']['h5p_libraries']['js'][] = $script->path;
        $integration['loadedJs'] = $url;
        $added_js[$url] = TRUE;
      }
    }
    foreach ($files['styles'] as $style) {
      $url = base_path() . $style->path . $style->version;
      if (!isset($added_css[$url])) {
        //drupal_add_css($style->path);
        $_SESSION['h5p']['h5p_libraries']['css'][] = $style->path;
        $integration['loadedCss'][] = $url;
        $added_css[$url] = TRUE;
      }
    }
  }
  elseif ($embed_type === 'iframe') {
    h5p_add_iframe_assets($integration, $content['id'], $files);
  }
  return $integration;
}

/**
 * Checks to see if the path is external.
 *
 * @param string $path
 * @return bool
 */
function h5p_is_external_asset($path) {
  return preg_match('/^[a-z0-9]+:\/\//i', $path) ? TRUE : FALSE;
}

/**
 * Add the necessary assets for content to run in an iframe.
 *
 * @param array $integration
 * @param int $content_id
 * @param array $files
 */
function h5p_add_iframe_assets(&$integration, $content_id, $files) {

  static $core_added;

  if ($core_added === NULL) {
    $core_added = TRUE;
    $core_assets = h5p_add_core_assets();
    $integration['core']['scripts'] = $core_assets['js'];
    $integration['core']['styles'] = $core_assets['css'];
  }

  $preprocess_css = \Drupal::state('preprocess_css')
    ->get('preprocess_css') ?: FALSE;
  $preprocess_css = $preprocess_css && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update');

  $preprocess_js = \Drupal::state('preprocess_css')
    ->get('preprocess_js') ?: FALSE;
  $preprocess_js = $preprocess_js && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update');

  $directory = \Drupal::service('file_system')->realpath('public://');
  $is_writable = is_dir($directory) && is_writable($directory);
  // TODO: && (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC); ?

  // Aggregate library styles and scripts for faster loading when using iframe.
  // Core files are not included to leverage browser caching! See http://css-tricks.com/one-two-three
  $helper = new Helper\H5PEnvironment();
  $core = $helper->getInstance('core');

  if ($is_writable && $preprocess_css) {
    // Refactor styles array to Drupal eatable format.
    $styles = array();
    // Filters out external styles
    $external_styles = array();
    foreach ($files['styles'] as $style) {
      if (h5p_is_external_asset($style->path)) {
        $external_styles[] = $style;
      }
      else {
        // Aggregate
        $styles[] = array(
          'data' => $style->path,
          'type' => 'file'
        );
      }
    }

    $integration['contents']['cid-' . $content_id]['styles'] = $core->getAssetsUrls($external_styles);
    $integration['contents']['cid-' . $content_id]['styles'][] = file_create_url(drupal_build_css_cache($styles));
  }
  else {
    $integration['contents']['cid-' . $content_id]['styles'] = $core->getAssetsUrls($files['styles']);
  }

  if ($is_writable && $preprocess_js) {
    // Refactor scripts array to Drupal eatable format.
    $scripts = array();
    // Filters out external scripts
    $external_scripts = array();
    foreach ($files['scripts'] as $script) {
      if (h5p_is_external_asset($script->path)) {
        $external_scripts[] = $script;
      }
      else {
        // Aggregate
        $scripts[$script->path] = array(
          'data' => $script->path,
          'type' => 'file',
          'preprocess' => TRUE,
        );
      }
    }

    $integration['contents']['cid-' . $content_id]['scripts'] = $core->getAssetsUrls($external_scripts);
    $integration['contents']['cid-' . $content_id]['scripts'][] = file_create_url(drupal_build_js_cache($scripts));
  }
  else {
    $integration['contents']['cid-' . $content_id]['scripts'] = $core->getAssetsUrls($files['scripts']);
  }

}



/**
 * Verify that the libraries H5P needs exists
 *
 * @return boolean
 *  TRUE if the settings validate, FALSE otherwise
 */
function _h5p_check_settings() {
  $h5p_default_path = \Drupal::state()->get('h5p_default_path') ?: 'h5p';
  $path = \Drupal::service('file_system')->realpath('public://' . $h5p_default_path);

  // Creating directories - the first empty string is for creating the parent H5P directory
  foreach (array('', 'temp', 'libraries', 'content', 'exports', 'development') as $directory) {
    $directory = $path . '/' . $directory;
    if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      return FALSE;
    }
  }

  return TRUE;
}


/**
 * Deletes old session variables that aren't valid anymore
 *
 * We don't want to keep any session variables around if this
 * is a new form...
 */
function _h5p_maintain_session_variables() {
  if (!$_POST && !empty($_SESSION['h5p_upload'])) {
    unset($_SESSION['h5p_upload'], $_SESSION['h5p_upload_folder']);
  }
}


/**
 * Get the path to the h5p files folder.
 *
 * @return string
 *  Path to the h5p files folder
 */
function _h5p_get_h5p_path() {
  $url = file_create_url("public://");
  $base_path = base_path();
  $pos = strpos($url, $base_path) + strlen($base_path) - 1;
  $rel_path = substr($url, $pos);
  $h5p_path = \Drupal::state()->get('h5p_default_path') ?: 'h5p';

  // $real_path = \Drupal::service('file_system')->realpath('public://');
  return $rel_path . $h5p_path;
}

/**
 * Get the url to the h5p files folder.
 *
 * @return string
 *  url to the h5p files folder
 */
function _h5p_get_h5p_url() {
  $url = file_create_url("public://");
  $h5p_path = \Drupal::state()->get('h5p_default_path') ?: 'h5p';
  return $url . $h5p_path;
}


/**
 * Get a list of libraries more suitable for inspection than the dependencies list
 *
 * @param array $dependencies
 *  List of dependencies on the format returned from H5P core
 * @return array
 *  List of libraries indexed by machineName and with objects as values with
 *  major and minor versions as properties.
 */
function _h5p_dependencies_to_library_list($dependencies) {
  $library_list = array();
  foreach ($dependencies as $dependency) {
    $library_list[$dependency['machineName']] = array(
      'majorVersion' => $dependency['majorVersion'],
      'minorVersion' => $dependency['minorVersion'],
    );
  }
  return $library_list;
}

/**
 * Checks if the variable has changed before setting it.
 * This is to avoid performance costly mistakes.
 */
function h5p_variable_set($name, $value) {
  $state_value = \Drupal::state()->get($name);
  if ($state_value !== $value) {
    \Drupal::state()->set($name, $value);
  }
}

function h5p_node_add_or_edit() {

  $result = FALSE;

  $current_path = \Drupal::service('path.current')->getPath();
  $path_array = explode('/', $current_path);
  if ( count($path_array) == 4 && $path_array[1] == 'node' && ($path_array[2] == 'add' || $path_array[3] == 'edit')) {
    $result = TRUE;
  }

  return $result;
}

function h5p_admin() {

  $result = FALSE;

  $current_path = \Drupal::service('path.current')->getPath();
  $path_array = explode('/', $current_path);
  if ( count($path_array) > 1 && $path_array[1] == 'admin') {
    $result = TRUE;
  }

  return $result;
}

